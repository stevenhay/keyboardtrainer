{"version":3,"sources":["interfaces/words.ts","components/KLInput/KLInput.tsx","components/Branding/Branding.tsx","components/Nav/Nav.tsx","helpers/locale.ts","helpers/wordgen.ts","components/Stopwatch/TimeElapsed.tsx","components/Stopwatch/Stopwatch.tsx","components/Stats/Statistics.tsx","components/Search/Search.tsx","components/KeyboardLearner/KLRouter.tsx","reportWebVitals.ts","index.tsx"],"names":["KeyPressResult","InputState","Branding","className","React","Navigation","href","data-target","data-toggle","type","id","Locale","localeMap","Map","this","set","arabic","english","locale","get","WordGen","keySet","lastIdx","getLocaleKeySet","undefined","letters","word","i","idx","Math","floor","random","length","letter","push","value","colour","typed","KLInput","props","BACKSPACE_KEY","WHITE_COLOUR","GREEN_COLOUR","RED_COLOUR","inputState","ALLOWED","state","currentInput","onChange","onTextFieldChange","bind","onKeyDown","onKeyDownValue","onKeyPress","onKeyPressValue","event","input","target","setState","getCurrentWord","forEach","handleKeyPressCallback","BACKSPACE","wordLetter","handleIncorrectInput","INCORRECT","CORRECT","handleFinishedWord","DISALLOWED","preventDefault","stopPropagation","key","wordFinishedCallback","currentWord","Component","TimeElapsed","units","getUnits","leftPad","min","sec","seconds","timeElapsed","toString","width","n","Array","join","slice","Stopwatch","initialState","timer","startTimer","isRunning","times","clearInterval","concat","setInterval","Statistics","stopwatchRef","ref","correctKeys","incorrectKeys","averageTime","totalTime","Search","statsRef","wordGen","hasWordSet","generateWord","session","correctKeyPresses","incorrectKeyPresses","totalWords","getColouredWord","wordFinished","handleKeyPress","keyRender","current","stopwatch","getStopwatch","time","lap","console","log","keyPressResult","forceUpdate","KLRouter","HISTORY","createBrowserHistory","history","exact","path","component","displayRoot","displayRootLocale","match","params","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b3c77fac.chunk.js","sourcesContent":["export interface IWord {\n  word: string;\n  letters: ILetter[]\n};\n\nexport interface ILetter {\n  value: string,\n  colour: string,\n  typed: boolean,\n};\n\nexport interface ISession {\n  correctKeyPresses: number;\n  incorrectKeyPresses: number;\n  averageTime: number;\n  totalTime: number;\n  totalWords: number;\n};\n\nexport enum KeyPressResult {\n  CORRECT, INCORRECT, BACKSPACE\n}","import React from \"react\";\nimport { ILetter, IWord, KeyPressResult } from \"../../interfaces/words\";\n\ninterface IProps {\n  currentWord: IWord;\n  wordFinishedCallback: () => void;\n  handleKeyPressCallback: (event: KeyPressResult) => void;\n}\n\ninterface IState {\n  currentInput: string;\n}\n\nenum InputState {\n  ALLOWED,\n  DISALLOWED\n}\n\nexport default class KLInput extends React.Component<IProps, IState> {\n  private readonly BACKSPACE_KEY = 'Backspace';\n  private readonly WHITE_COLOUR = 'white';\n  private readonly GREEN_COLOUR = 'green';\n  private readonly RED_COLOUR = 'red';\n\n  private inputState: InputState;\n\n  constructor(props: IProps) {\n    super(props);\n\n    this.inputState = InputState.ALLOWED;\n    this.state = { currentInput: '' }\n  }\n\n  render() {\n    return (\n      <div className=\"row justify-content-center\">\n        <input\n          type=\"text\"\n          value={this.state.currentInput}\n          onChange={this.onTextFieldChange.bind(this)}\n          onKeyDown={this.onKeyDownValue.bind(this)}\n          onKeyPress={this.onKeyPressValue.bind(this)}\n        />\n      </div>\n    )\n  }\n\n  onTextFieldChange(event: React.ChangeEvent<HTMLInputElement>) {\n    let input = event.target.value;\n    this.setState({ currentInput: input });\n\n    // reset the word back to white\n    this.getCurrentWord().letters.forEach(letter => letter.colour = this.WHITE_COLOUR);\n    this.props.handleKeyPressCallback(KeyPressResult.BACKSPACE); // force update\n\n    if (input.length === 0) {\n      this.inputState = InputState.ALLOWED;\n      return;\n    }\n\n    for (let i = 0; i < input.length; i++) {\n      const wordLetter = this.getCurrentWord().letters[i];\n      if (input[i] === wordLetter.value) {\n        if (!wordLetter.typed) { // if the letter hasn't been previously typed\n          this.props.handleKeyPressCallback(KeyPressResult.CORRECT);\n          wordLetter.typed = true;\n        }\n\n        wordLetter.colour = this.GREEN_COLOUR;\n        this.inputState = InputState.ALLOWED;\n      } else {\n        this.handleIncorrectInput(wordLetter);\n        this.props.handleKeyPressCallback(KeyPressResult.INCORRECT);\n        return\n      }\n    }\n\n    if (input === this.getCurrentWord().word) {\n      this.handleFinishedWord();\n    }\n  }\n\n  onKeyPressValue(event: React.KeyboardEvent<HTMLInputElement>) {\n    // don't allow typing when input is not allowed\n    if (this.inputState === InputState.DISALLOWED) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  onKeyDownValue(event: React.KeyboardEvent<HTMLInputElement>) {\n    // don't allow typing when input is not allowed\n    if (event.key === this.BACKSPACE_KEY) {\n      this.props.handleKeyPressCallback(KeyPressResult.BACKSPACE);\n    }\n  }\n\n  private handleIncorrectInput(wordLetter: ILetter) {\n    wordLetter.colour = this.RED_COLOUR;\n    this.inputState = InputState.DISALLOWED; // disallow input except backspace\n  }\n\n  private handleFinishedWord() {\n    this.setState({ currentInput: '' });\n    this.props.wordFinishedCallback();\n\n    this.inputState = InputState.ALLOWED;\n  }\n\n  private getCurrentWord(): IWord {\n    return this.props.currentWord;\n  }\n}","import * as React from 'react';\n\nimport './Branding.css';\n\nexport default class Branding extends React.Component {\n  render() {\n    return (\n      <div className=\"sf-logo-container\">\n        <div className=\"container\">\n          <div className=\"sf-logo\">\n            <h1>Keyboard <span className=\"bold\">Trainer</span></h1>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}","import * as React from 'react';\nimport './Nav.css'\n\nexport default class Navigation extends React.Component {\n  render() {\n    return (\n      <nav className=\"navbar navbar-expand-md navbar-fixed-top navbar-dark bg-dark main-nav\">\n        <div className=\"container\">\n          <div className=\"navbar-header\">\n            <a className=\"navbar-brand\" href=\"#\">K<span>T</span></a>\n          </div>\n          <button className=\"navbar-toggler hidden-md-up pull-xs-right\" data-target=\"#collapsenav\" data-toggle=\"collapse\" type=\"button\">\n            ☰\n          </button>\n          <div className=\"collapse navbar-collapse\" id=\"collapsenav\">\n            <ul className=\"nav navbar-nav mx-auto\">\n            </ul>\n          </div>\n        </div>\n      </nav>\n    )\n  }\n}","export default class Locale {\n    private readonly localeMap = new Map<string, string[]>();\n\n    constructor() {\n        this.localeMap.set(\"ar\", this.arabic());\n        this.localeMap.set(\"en\", this.english());\n    }\n\n    public getLocaleKeySet(locale: string): string[] | undefined {\n        return this.localeMap.get(locale);\n    }\n\n    private arabic(): string[] {\n        return [\n            'ا', 'ب', 'ت', 'ث', 'ج',\n            'ح', 'خ', 'د', 'ذ', 'ر',\n            'ز', 'س', 'ش', 'ص', 'ض',\n            'ط', 'ظ', 'ع', 'غ', 'ف',\n            'ق', 'ك', 'ل', 'م', 'ن',\n            'ه', 'و', 'ي', // Main Keys\n\n            'ء', 'ة', 'ئ', 'ؤ', // Other Keys\n        ]\n    }\n\n    private english(): string[] {\n        return [\n            'a', 'b', 'c', 'd', 'e',\n            'f', 'g', 'h', 'i', 'j',\n            'k', 'l', 'm', 'n', 'o',\n            'p', 'q', 'r', 's', 't',\n            'u', 'v', 'x', 'y', 'z',\n        ]\n    }\n}\n","import { ILetter, IWord } from \"../interfaces/words\";\nimport Locale from \"./locale\";\n\nexport default class WordGen {\n  private readonly keySet: string[] | undefined;\n\n  private lastIdx: number;\n\n  constructor(locale: string) {\n    this.keySet = new Locale().getLocaleKeySet(locale);\n\n    this.lastIdx = -1;\n  }\n\n  hasWordSet(): boolean {\n    return this.keySet !== undefined;\n  }\n\n  generateWord(): IWord {\n    const letters: ILetter[] = [];\n    let word = '';\n\n    for (let i = 0; i < 5; i++) {\n      let idx;\n      do {\n        idx = Math.floor(Math.random() * this.keySet!.length);\n      } while (idx === this.lastIdx);\n      this.lastIdx = idx;\n\n      const letter = this.keySet![idx];\n      word += letter;\n\n      letters.push({\n        value: letter,\n        colour: 'white',\n        typed: false\n      })\n    }\n    return { word, letters };\n  }\n}","import React from 'react';\n\ninterface IProps {\n  id: string;\n  timeElapsed: number;\n}\n\nexport default class TimeElapsed extends React.Component<IProps, {}> {\n  render() {\n    const units = this.getUnits();\n    return (\n      <div id={this.props.id}>\n        <span>{this.leftPad(2, units.min)}:</span>\n        <span>{this.leftPad(2, units.sec)}</span>\n      </div>\n    );\n  }\n\n  getUnits() {\n    const seconds = this.props.timeElapsed;\n    return {\n      min: Math.floor(seconds / 60).toString(),\n      sec: Math.floor(seconds % 60).toString(),\n    };\n  }\n\n  leftPad(width: number, n: string) {\n    if ((n + '').length > width) {\n      return n;\n    }\n    const padding = new Array(width).join('0');\n    return (padding + n).slice(-width);\n  };\n}","import React from 'react';\nimport TimeElapsed from './TimeElapsed';\n\ninterface IStopwatchState {\n  isRunning: boolean;\n  timeElapsed: number;\n  times: number[];\n}\nexport default class Stopwatch extends React.Component<{}, IStopwatchState> {\n  private readonly initialState: IStopwatchState;\n  private timer!: NodeJS.Timer;\n\n  constructor(props: IStopwatchState) {\n    super(props);\n\n    this.startTimer();\n\n    this.state = this.initialState = {\n      isRunning: true,\n      timeElapsed: 0,\n      times: []\n    };\n  }\n\n  toggle() {\n    this.setState({ isRunning: !this.state.isRunning }, () => {\n      this.state.isRunning ? this.startTimer() : clearInterval(this.timer)\n    });\n  }\n\n  lap(): number {\n    const { times, timeElapsed } = this.state;\n    this.setState({ times: times.concat(timeElapsed), timeElapsed: 0 })\n    return timeElapsed;\n  }\n\n  reset() {\n    clearInterval(this.timer);\n    this.setState(this.initialState);\n  }\n\n  startTimer() {\n    this.timer = setInterval(() => {\n      this.setState({ timeElapsed: this.state.timeElapsed + 1 });\n    }, 1000);\n  }\n\n  render() {\n    return (\n      <div>\n        <TimeElapsed id=\"timer\" timeElapsed={this.state.timeElapsed} />\n      </div>\n    );\n  }\n}\n","import * as React from 'react';\nimport Stopwatch from '../Stopwatch/Stopwatch';\nimport TimeElapsed from '../Stopwatch/TimeElapsed';\nimport './Statistics.css';\n\ninterface IProps {\n  correctKeys: number;\n  incorrectKeys: number;\n  averageTime: number;\n  totalTime: number;\n}\n\ninterface IState { }\n\nexport default class Statistics extends React.Component<IProps, IState> {\n  private stopwatchRef = React.createRef<Stopwatch>();\n\n  render() {\n    return (\n      <div className=\"sf-statistics\">\n        <div className=\"container\">\n          <div className=\"sf-stats row\">\n            <div className=\"col-sm-12\">\n              <span className=\"stats-box timer color-white\"><Stopwatch ref={this.stopwatchRef} /></span>\n            </div>\n          </div>\n          <div className=\"sf-stats row d-none d-lg-flex\">\n            <div className=\"col-sm-3 offset-sm-2\">\n              <h6 className=\"stats-text\">Keys</h6>\n              <div className=\"sf-stats row\">\n                <div className=\"col-sm-6\">\n                  <span className=\"stats-box color-green\">{this.props.correctKeys}</span>\n                  <br />\n                  <span className=\"stats-text\">Correct</span>\n                </div>\n                <div className=\"col-sm-6\">\n                  <span className=\"stats-box color-red\">{this.props.incorrectKeys}</span>\n                  <br />\n                  <span className=\"stats-text\">Incorrect</span>\n                </div>\n              </div>\n            </div>\n            <div className=\"col-sm-2\">\n            </div>\n            <div className=\"col-sm-3\">\n              <h6 className=\"stats-text\">Time</h6>\n              <div className=\"sf-stats row\">\n                <div className=\"col-sm-6\">\n                  <span className=\"stats-box color-white\"><TimeElapsed id=\"average\" timeElapsed={this.props.averageTime} /></span>\n                  <br />\n                  <span className=\"stats-text\">Average</span>\n                </div>\n                <div className=\"col-sm-6\">\n                  <span className=\"stats-box color-white\"><TimeElapsed id=\"average\" timeElapsed={this.props.totalTime} /></span>\n                  <br />\n                  <span className=\"stats-text\">Total</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  getStopwatch(): React.RefObject<Stopwatch> {\n    return this.stopwatchRef;\n  }\n}","import * as React from 'react';\nimport WordGen from '../../helpers/wordgen';\nimport { ISession, IWord, KeyPressResult } from '../../interfaces/words';\nimport KLInput from '../KLInput/KLInput';\nimport Statistics from '../Stats/Statistics';\nimport './Search.css';\n\ninterface IProps {\n  locale: string;\n}\n\ninterface SearchState {\n  currentWord: IWord;\n  session: ISession;\n}\n\nexport default class Search extends React.Component<IProps, SearchState> {\n  private statsRef = React.createRef<Statistics>();\n  private wordGen: WordGen;\n\n  constructor(props: IProps) {\n    super(props);\n\n    this.wordGen = new WordGen(this.props.locale);\n    if (this.wordGen.hasWordSet()) {\n      this.state = {\n        currentWord: this.wordGen.generateWord(),\n        session: {\n          correctKeyPresses: 0,\n          incorrectKeyPresses: 0,\n          averageTime: 0,\n          totalTime: 0,\n          totalWords: 0,\n        }\n      };\n    }\n  }\n\n  render() {\n    if (!this.wordGen.hasWordSet()) {\n      return (\n        <div className=\"sf-search\">\n          <div className=\"container\">\n            <div className=\"col-lg-12\">\n              <div className=\"row justify-content-center\">\n                <h3>Sorry, the locale '{this.props.locale}' is not available at this time.</h3>\n              </div>\n            </div>\n          </div>\n        </div>\n      )\n    }\n\n    return (\n      <div className=\"sf-search\">\n        <Statistics\n          ref={this.statsRef}\n          correctKeys={this.state.session.correctKeyPresses}\n          incorrectKeys={this.state.session.incorrectKeyPresses}\n          averageTime={this.state.session.averageTime}\n          totalTime={this.state.session.totalTime}\n        />\n        <div className=\"container\">\n          <div className=\"col-lg-12\">\n            <div>\n              <div className=\"row justify-content-center\">\n                <label className=\"kl-requested-key\">\n                  {this.getColouredWord()}\n                </label>\n              </div>\n              <KLInput\n                currentWord={this.state.currentWord}\n                wordFinishedCallback={this.wordFinished.bind(this)}\n                handleKeyPressCallback={this.handleKeyPress.bind(this)}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  private getColouredWord(): JSX.Element[] {\n    const keyRender: JSX.Element[] = [];\n    for (let i = 0; i < this.state.currentWord.letters.length; i++) {\n      const { value, colour } = this.state.currentWord.letters[i];\n      keyRender.push(<span key={\"key-\" + i} id={\"key-\" + i} className={\"color-\" + colour}>{value}</span>);\n    }\n    return keyRender;\n  }\n\n  private wordFinished() {\n    if (!this.statsRef.current) {\n      console.log('statsRef is not valid!!');\n      return\n    }\n\n    const stopwatch = this.statsRef.current.getStopwatch().current;\n    if (!stopwatch) {\n      console.log('stopwatchRef is not valid!!');\n      return;\n    }\n\n    const session = this.state.session;\n    const time = stopwatch.lap();\n\n    session.totalWords += 1;\n    session.totalTime += time;\n    session.averageTime = session.totalTime / session.totalWords;\n\n    this.setState({ currentWord: this.wordGen.generateWord() });\n  }\n\n  private handleKeyPress(keyPressResult: KeyPressResult) {\n    const session = this.state.session;\n    if (keyPressResult === KeyPressResult.CORRECT) {\n      session.correctKeyPresses += 1;\n      this.setState({ session })\n    } else if (keyPressResult === KeyPressResult.INCORRECT) {\n      session.incorrectKeyPresses += 1;\n      this.setState({ session })\n    } else {\n      this.forceUpdate();\n    }\n  }\n}","import { createBrowserHistory } from 'history';\nimport * as React from 'react';\nimport { Route, RouteComponentProps, Router } from 'react-router-dom';\n\nimport Branding from '../Branding/Branding';\nimport Nav from '../Nav/Nav';\nimport Search from '../Search/Search';\n\nimport './KeyboardLearner.css';\n\ninterface MatchParams {\n  locale: string;\n}\n\ninterface MatchProps extends RouteComponentProps<MatchParams> {}\n\nexport default class KLRouter extends React.Component {\n  private readonly HISTORY = createBrowserHistory();\n\n  render() {\n    return (\n      <Router history={this.HISTORY}>\n        <div className=\"keyboard-tutor\">\n          <Nav />\n          <Route exact={true} path=\"/\" component={this.displayRoot} />\n          <Route path=\"/:locale\" component={this.displayRootLocale} />\n        </div>\n      </Router>\n    )\n  }\n\n  displayRoot() {\n    return (\n      <div>\n        <Branding />\n        <Search locale={\"ar\"}/>\n      </div>\n    )\n  }\n\n  displayRootLocale(match: MatchProps) {\n    return (\n      <div>\n        <Branding />\n        <Search locale={match.match.params.locale} />\n      </div>\n    )\n  }\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom'\n\nimport './index.css';\nimport Router from './components/KeyboardLearner/KLRouter';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Router />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}